
module "virtual_network" {
  //source = "git::https://github.com/leonardpolz/terraform-governance-framework-core-modules.git//tf-az-virtual-network?ref=v1.0.0"
  source = "../tf-az-virtual-network"
  virtual_networks = [
    {
      tf_id = "test_vnet"

      name_config = {
        name_segments = {
          landing_zone  = "lz"
          environment   = "dev"
          workload_name = "test-vnet"
        }
      }

      tags = {
        terraform_repository_uri = "https://github.com/leonardpolz/terraform-governance-framework-core-modules.git"
        deployed_by              = "Leonard Polz"
        hidden-title             = "Test Virtual Network"
      }

      resource_group_name = "test-rg"
      address_space       = ["0.0.0.0/16"]

      dns_servers = ["8.8.8.8"]

      role_assignments = [
        {
          principal_id         = "00000000-0000-0000-0000-000000000000"
          role_definition_name = "Contributor"
        },
        {
          principal_id         = "11111111-1111-1111-1111-111111111111"
          role_definition_name = "Reader"
        }
      ]

      subnets = [{
        tf_id = "default"

        name_config = {
          name_segments = {
            workload_name = "default"
          }
        }

        address_prefixes = ["0.0.0.0/24"]

        delegations = [{
          name_config = {
            name_segments = {
            }

            parent_name = "sqlmi-mock"
          }

          service_delegation = {
            name    = "Microsoft.Web/serverFarms"
            actions = ["Microsoft.Network/virtualNetworks/subnets/action"]
          }
        }]

        network_security_group_settings = {

          name_config = {
            name_segments = {}
          }

          nc_bypass = "test-nsg"

          security_rules = [
            {
              tf_id = "test_nsg_rule"

              name_config = {
                name_segments = {
                  workload_name = "test-nsg-rule"
                }
              }

              nc_bypass = "test-nsg-rule"

              description                = "Allow inbound traffic on port 80"
              protocol                   = "Tcp"
              source_port_range          = "33"
              source_address_prefix      = "1.1.1.1"
              destination_port_range     = "80"
              destination_address_prefix = "2.2.2.2"
              access                     = "Allow"
              priority                   = 100
              direction                  = "Inbound"
            }
          ]
        }
      }]

      virtual_network_peerings = [{
        tf_id = "test_vnet_peering"

        name_config = {
          name_segments = {}

          parent_name = "hub-vnet"
        }

        remote_virtual_network_id = "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg-mock-group/providers/Microsoft.Network/virtualNetworks/vnet-mock-network"
      }]
    },
  ]
}

# output "virtual_network_config" {
#   value = module.virtual_network.virtual_network_config_map
# }
